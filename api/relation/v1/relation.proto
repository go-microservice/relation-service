syntax = "proto3";

package relation.v1;

option go_package = "github.com/go-microservice/relation-service/api/relation/v1;v1";
option java_multiple_files = true;
option java_package = "api.relation.v1";

// 好友关系服务
service RelationService {
	// 关注
	rpc Follow (FollowRequest) returns (FollowReply);
	// 取消关注
	rpc Unfollow (UnfollowRequest) returns (UnfollowReply);
	// 批量获取关注关系, eg: A 对 B,C,D是否已关注
	rpc BatchGetRelation (BatchGetRelationRequest) returns (BatchGetRelationReply);
	// 关注列表
	rpc GetFollowingList (FollowingListRequest) returns (FollowingListReply);
	// 粉丝列表
	rpc GetFollowerList (FollowerListRequest) returns (FollowerListReply);
}

message FollowRequest {
	int64 user_id = 1;
	int64 followed_uid = 2;
}
message FollowReply {}

message UnfollowRequest {
	int64 user_id = 1;
	int64 followed_uid = 2;
}
message UnfollowReply {}

// 批量获取关注请求
message BatchGetRelationRequest {
	int64 user_id = 1;
	repeated int64 ids = 2;
}

// 批量获取关注响应
message BatchGetRelationReply {
	// uid -> follow_status
	map<int64, int64> result = 1;
}

// 关注列表请求
message FollowingListRequest {
	int64 user_id = 1;
	int64 last_id = 2;
	int32 limit = 3;
}
// 关注列表响应
message FollowingListReply {
	message userFollow {
		int64 id = 1;
		int64 followed_uid = 2;
	}
	repeated userFollow result = 1;
}

// 粉丝列表请求
message FollowerListRequest {
	int64 user_id = 1;
	int64 last_id = 2;
	int32 limit = 3;
}
// 粉丝列表响应
message FollowerListReply {
	message follower {
		int64 id = 1;
		int64 follower_uid = 2;
	}
	repeated follower result = 1;
}